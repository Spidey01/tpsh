#!/usr/bin/perl
#
# Yes this may be cheap, cheesey, and ugly to a purest versus the combo of perl
# modules (use Tpsh::Tests::Foo) and perl meta programming to execute them but
# hell, it's also simple and exactly what I want! Oh, and did I mention it
# keeps tests closer to live tpsh code?

use warnings;
use strict;

push @INC, '.';

do 'tpsh';
# TODO make tpsh handle this for us correctly.
init_sh();


my $ActiveTest;
my %Results = ( passes => 0, tests => 0, failures => 0, asserts => 0 );

our $TestRunnerDir = $ENV{PWD};

# assert BLOCK "message to show on failure"
#
sub assert(&$) {
    my ($block, $msg) = @_;
    $Results{asserts}++;

    my $rv = $block->(); 
    if (!$rv) {
        $Results{failures}++;
        print "$ActiveTest failed: $msg\n";
    } else {
        $Results{passes}++;
    }

    return $rv;
}

# assert_array ARRAYREF, ARRAYREF, "message to show on failure"
#
sub assert_array($$$) {
    my ($a, $b, $m) = @_;

    return assert { 
        foreach my $g (@$a) {
            print "bork $g\n" if ! grep { $g eq $_ } @$b;
            return 0 if ! grep { $g eq $_ } @$b;
        }

        1;
    } $m;
}


foreach (<tests.d/*.pl>) {
    $Results{tests}++;
	do ($ActiveTest = $_);
}



my $header = "-" x ($ENV{COLUMNS} || 10);
print $header, "\n\tSUMMARY\n\n";
print "$Results{tests} tests were run with $Results{asserts} assertions\n";
print "$Results{passes} passed\n";
print "$Results{failures} failed\n";
print $header, "\n";
